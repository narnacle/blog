<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Programming on Narnacle&#39;s Dev Blog</title>
    <link>https://www.narnacle.com/tags/programming/</link>
    <description>Recent content in Programming on Narnacle&#39;s Dev Blog</description>
    <image>
      <url>https://www.narnacle.com/narnacle.png</url>
      <link>https://www.narnacle.com/narnacle.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Jul 2025 14:00:00 +0300</lastBuildDate><atom:link href="https://www.narnacle.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Selenium Tutorial - Automate Websites and Create Bots</title>
      <link>https://www.narnacle.com/posts/python-selenium-tutorial-automate-websites-and-create-bots/</link>
      <pubDate>Thu, 17 Jul 2025 14:00:00 +0300</pubDate>
      
      <guid>https://www.narnacle.com/posts/python-selenium-tutorial-automate-websites-and-create-bots/</guid>
      <description>&lt;p&gt;Automating a web browser with Selenium allows you to control a browser (like Chrome, Firefox, etc.) using Python code. This is useful for tasks like web scraping, testing, or automating repetitive tasks like filling out forms or interacting with web elements.&lt;/p&gt;
&lt;p&gt;Here’s a basic guide to get you started:&lt;/p&gt;
&lt;h3 id=&#34;1-set-up-your-environment&#34;&gt;1. &lt;strong&gt;Set up your environment&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To use Selenium with Python, you&amp;rsquo;ll need to install the &lt;code&gt;selenium&lt;/code&gt; package and a web driver for the browser you want to control.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Automating a web browser with Selenium allows you to control a browser (like Chrome, Firefox, etc.) using Python code. This is useful for tasks like web scraping, testing, or automating repetitive tasks like filling out forms or interacting with web elements.</p>
<p>Here’s a basic guide to get you started:</p>
<h3 id="1-set-up-your-environment">1. <strong>Set up your environment</strong></h3>
<p>To use Selenium with Python, you&rsquo;ll need to install the <code>selenium</code> package and a web driver for the browser you want to control.</p>
<h4 id="install-selenium">Install Selenium:</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install selenium
</span></span></code></pre></div><h4 id="download-a-webdriver">Download a WebDriver:</h4>
<ul>
<li>
<p><strong>Chrome</strong>: You need to download <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">ChromeDriver</a>.</p>
</li>
<li>
<p><strong>Firefox</strong>: You can use <a href="https://github.com/mozilla/geckodriver/releases">geckodriver</a>.</p>
</li>
</ul>
<p>Make sure to place the WebDriver in a location that’s part of your system&rsquo;s <code>PATH</code> or specify the path directly in your script.</p>
<h3 id="2-basic-example">2. <strong>Basic Example</strong></h3>
<p>Below is a simple example to open a browser, navigate to a page, and interact with elements:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> selenium <span style="color:#f92672">import</span> webdriver
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> selenium.webdriver.common.by <span style="color:#f92672">import</span> By
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> selenium.webdriver.common.keys <span style="color:#f92672">import</span> Keys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set up the WebDriver (assuming using Chrome)</span>
</span></span><span style="display:flex;"><span>driver <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>Chrome(executable_path<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/path/to/chromedriver&#39;</span>)  <span style="color:#75715e"># Adjust the path if necessary</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Open a website</span>
</span></span><span style="display:flex;"><span>driver<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;https://www.google.com&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find the search box and type something</span>
</span></span><span style="display:flex;"><span>search_box <span style="color:#f92672">=</span> driver<span style="color:#f92672">.</span>find_element(By<span style="color:#f92672">.</span>NAME, <span style="color:#e6db74">&#34;q&#34;</span>)
</span></span><span style="display:flex;"><span>search_box<span style="color:#f92672">.</span>send_keys(<span style="color:#e6db74">&#34;Selenium Python&#34;</span>)
</span></span><span style="display:flex;"><span>search_box<span style="color:#f92672">.</span>send_keys(Keys<span style="color:#f92672">.</span>RETURN)  <span style="color:#75715e"># Simulate hitting Enter</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Wait for the results to load (you can also use WebDriverWait for more precision)</span>
</span></span><span style="display:flex;"><span>driver<span style="color:#f92672">.</span>implicitly_wait(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Perform actions on the result (e.g., click a link)</span>
</span></span><span style="display:flex;"><span>first_result <span style="color:#f92672">=</span> driver<span style="color:#f92672">.</span>find_element(By<span style="color:#f92672">.</span>CSS_SELECTOR, <span style="color:#e6db74">&#34;.LC20lb&#34;</span>)
</span></span><span style="display:flex;"><span>first_result<span style="color:#f92672">.</span>click()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Close the browser after some time</span>
</span></span><span style="display:flex;"><span>driver<span style="color:#f92672">.</span>quit()
</span></span></code></pre></div><h3 id="3-important-concepts-in-selenium">3. <strong>Important Concepts in Selenium:</strong></h3>
<ul>
<li>
<p><strong>WebDriver</strong>: The core component to interact with the browser.</p>
</li>
<li>
<p><strong>Locating Elements</strong>: You can find elements on a page using different strategies like <code>find_element_by_id</code>, <code>find_element_by_class_name</code>, <code>find_element_by_xpath</code>, etc. The example above uses <code>By.NAME</code> and <code>By.CSS_SELECTOR</code>.</p>
</li>
<li>
<p><strong>Interactions</strong>: You can simulate actions like <code>send_keys</code> (typing), <code>click()</code>, <code>submit()</code>, etc.</p>
</li>
<li>
<p><strong>Waiting</strong>: Selenium can wait for elements to appear using <code>implicitly_wait()</code>, or for more fine-tuned control, use <code>WebDriverWait</code> and expected conditions.</p>
</li>
</ul>
<h3 id="4-handling-popups-and-alerts">4. <strong>Handling Popups and Alerts:</strong></h3>
<p>To handle popups or JavaScript alerts, you can use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Accept an alert</span>
</span></span><span style="display:flex;"><span>alert <span style="color:#f92672">=</span> driver<span style="color:#f92672">.</span>switch_to<span style="color:#f92672">.</span>alert
</span></span><span style="display:flex;"><span>alert<span style="color:#f92672">.</span>accept()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Dismiss an alert</span>
</span></span><span style="display:flex;"><span>alert<span style="color:#f92672">.</span>dismiss()
</span></span></code></pre></div><h3 id="5-advanced-features">5. <strong>Advanced Features:</strong></h3>
<ul>
<li><strong>Taking screenshots</strong>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>driver<span style="color:#f92672">.</span>save_screenshot(<span style="color:#e6db74">&#34;screenshot.png&#34;</span>)
</span></span></code></pre></div><ul>
<li><strong>Executing JavaScript</strong>: You can execute custom JavaScript in the browser:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>driver<span style="color:#f92672">.</span>execute_script(<span style="color:#e6db74">&#34;alert(&#39;Hello, world!&#39;)&#34;</span>)
</span></span></code></pre></div><ul>
<li><strong>Handling multiple windows</strong>: If your script opens multiple tabs/windows, you can switch between them using <code>driver.switch_to.window(window_handle)</code>.</li>
</ul>
<h3 id="6-headless-mode-optional">6. <strong>Headless Mode (Optional)</strong></h3>
<p>If you don&rsquo;t want the browser to open visibly, you can run the browser in &ldquo;headless&rdquo; mode. For Chrome, it looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> selenium.webdriver.chrome.options <span style="color:#f92672">import</span> Options
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>options <span style="color:#f92672">=</span> Options()
</span></span><span style="display:flex;"><span>options<span style="color:#f92672">.</span>headless <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>  <span style="color:#75715e"># Run in headless mode</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>driver <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>Chrome(executable_path<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/path/to/chromedriver&#39;</span>, options<span style="color:#f92672">=</span>options)
</span></span></code></pre></div><h3 id="7-troubleshooting">7. <strong>Troubleshooting</strong></h3>
<ul>
<li>
<p><strong>Element not found</strong>: Check if the page is fully loaded. Use <code>WebDriverWait</code> for dynamic content.</p>
</li>
<li>
<p><strong>Version mismatch</strong>: Ensure your WebDriver matches your browser version.</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
